{
  "_args": [
    [
      {
        "raw": "uglify-js@github:mishoo/UglifyJS2#harmony",
        "scope": null,
        "escapedName": "uglify-js",
        "name": "uglify-js",
        "rawSpec": "github:mishoo/UglifyJS2#harmony",
        "spec": "github:mishoo/UglifyJS2#harmony",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:mishoo/UglifyJS2.git#harmony",
          "sshUrl": "git+ssh://git@github.com/mishoo/UglifyJS2.git#harmony",
          "httpsUrl": "git+https://github.com/mishoo/UglifyJS2.git#harmony",
          "gitUrl": "git://github.com/mishoo/UglifyJS2.git#harmony",
          "shortcut": "github:mishoo/UglifyJS2#harmony",
          "directUrl": "https://raw.githubusercontent.com/mishoo/UglifyJS2/harmony/package.json"
        }
      },
      "K:\\REACTJS\\Mikkeliangelo"
    ]
  ],
  "_from": "mishoo/UglifyJS2#harmony",
  "_id": "uglify-es@3.0.3",
  "_inCache": true,
  "_location": "/uglify-es",
  "_phantomChildren": {},
  "_requested": {
    "raw": "uglify-js@github:mishoo/UglifyJS2#harmony",
    "scope": null,
    "escapedName": "uglify-js",
    "name": "uglify-js",
    "rawSpec": "github:mishoo/UglifyJS2#harmony",
    "spec": "github:mishoo/UglifyJS2#harmony",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:mishoo/UglifyJS2.git#harmony",
      "sshUrl": "git+ssh://git@github.com/mishoo/UglifyJS2.git#harmony",
      "httpsUrl": "git+https://github.com/mishoo/UglifyJS2.git#harmony",
      "gitUrl": "git://github.com/mishoo/UglifyJS2.git#harmony",
      "shortcut": "github:mishoo/UglifyJS2#harmony",
      "directUrl": "https://raw.githubusercontent.com/mishoo/UglifyJS2/harmony/package.json"
    }
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "git://github.com/mishoo/UglifyJS2.git#e2888bdc437142e95695220ac3b53511ef6edc53",
  "_shasum": "234d8a963e6ce0d0ea599b2e8642173dfd090506",
  "_shrinkwrap": null,
  "_spec": "uglify-js@github:mishoo/UglifyJS2#harmony",
  "_where": "K:\\REACTJS\\Mikkeliangelo",
  "author": {
    "name": "Mihai Bazon",
    "email": "mihai.bazon@gmail.com",
    "url": "http://lisperator.net/"
  },
  "bin": {
    "uglifyjs": "bin/uglifyjs"
  },
  "browserify": {
    "transform": [
      "uglify-to-browserify"
    ]
  },
  "bugs": {
    "url": "https://github.com/mishoo/UglifyJS2/issues"
  },
  "dependencies": {
    "commander": "~2.9.0",
    "source-map": "~0.5.1",
    "uglify-to-browserify": "~1.0.0"
  },
  "description": "JavaScript parser, mangler/compressor and beautifier toolkit",
  "devDependencies": {
    "acorn": "~0.6.0",
    "escodegen": "~1.3.3",
    "esfuzz": "~0.3.1",
    "estraverse": "~1.5.1",
    "mocha": "~2.3.4"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "files": [
    "bin",
    "lib",
    "tools",
    "LICENSE"
  ],
  "gitHead": "e2888bdc437142e95695220ac3b53511ef6edc53",
  "homepage": "http://lisperator.net/uglifyjs",
  "keywords": [
    "uglify",
    "uglify-js",
    "minify",
    "minifier"
  ],
  "license": "BSD-2-Clause",
  "main": "tools/node.js",
  "maintainers": [
    {
      "name": "Mihai Bazon",
      "email": "mihai.bazon@gmail.com",
      "url": "http://lisperator.net/"
    }
  ],
  "name": "uglify-es",
  "optionalDependencies": {
    "uglify-to-browserify": "~1.0.0"
  },
  "readme": "uglify-es\r\n=========\r\n[![Build Status](https://travis-ci.org/mishoo/UglifyJS2.svg)](https://travis-ci.org/mishoo/UglifyJS2)\r\n\r\n**uglify-es** is an ECMAScript 2015 parser, minifier, compressor and beautifier toolkit.\r\n\r\n#### Note:\r\n- **The `uglify-es` API and CLI is compatible with `uglify-js@3.x`.**\r\n- **`uglify-es` is not backwards compatible with the `uglify-js@2.x` API and CLI.**\r\n\r\nInstall\r\n-------\r\n\r\nFirst make sure you have installed the latest version of [node.js](http://nodejs.org/)\r\n(You may need to restart your computer after this step).\r\n\r\nFrom NPM for use as a command line app:\r\n\r\n    npm install uglify-es -g\r\n\r\nFrom NPM for programmatic use:\r\n\r\n    npm install uglify-es\r\n\r\nUsage\r\n-----\r\n\r\n    uglifyjs [input files] [options]\r\n\r\nUglifyJS can take multiple input files.  It's recommended that you pass the\r\ninput files first, then pass the options.  UglifyJS will parse input files\r\nin sequence and apply any compression options.  The files are parsed in the\r\nsame global scope, that is, a reference from a file to some\r\nvariable/function declared in another file will be matched properly.\r\n\r\nIf no input file is specified, UglifyJS will read from STDIN.\r\n\r\nIf you wish to pass your options before the input files, separate the two with\r\na double dash to prevent input files being used as option arguments:\r\n\r\n    uglifyjs --compress --mangle -- input.js\r\n\r\nThe available options are:\r\n\r\n```\r\n    -h, --help                  Print usage information.\r\n    -V, --version               Print version number.\r\n    -p, --parse <options>       Specify parser options:\r\n                                `acorn`  Use Acorn for parsing.\r\n                                `bare_returns`  Allow return outside of functions.\r\n                                                Useful when minifying CommonJS\r\n                                                modules and Userscripts that may\r\n                                                be anonymous function wrapped (IIFE)\r\n                                                by the .user.js engine `caller`.\r\n                                `expression`  Parse a single expression, rather than\r\n                                              a program (for parsing JSON).\r\n                                `spidermonkey`  Assume input files are SpiderMonkey\r\n                                                AST format (as JSON).\r\n    -c, --compress [options]    Enable compressor/specify compressor options:\r\n                                `pure_funcs`  List of functions that can be safely\r\n                                              removed when their return values are\r\n                                              not used.\r\n    -m, --mangle [options]      Mangle names/specify mangler options:\r\n                                `reserved`  List of names that should not be mangled.\r\n    --mangle-props [options]    Mangle properties/specify mangler options:\r\n                                `builtins`  Mangle property names that overlaps\r\n                                            with standard JavaScript globals.\r\n                                `debug`  Add debug prefix and suffix.\r\n                                `domprops`  Mangle property names that overlaps\r\n                                            with DOM properties.\r\n                                `keep_quoted`  Only mangle unquoted properies.\r\n                                `regex`  Only mangle matched property names.\r\n                                `reserved`  List of names that should not be mangled.\r\n    -b, --beautify [options]    Beautify output/specify output options:\r\n                                `beautify`  Enabled with `--beautify` by default.\r\n                                `preamble`  Preamble to prepend to the output. You\r\n                                            can use this to insert a comment, for\r\n                                            example for licensing information.\r\n                                            This will not be parsed, but the source\r\n                                            map will adjust for its presence.\r\n                                `quote_style`  Quote style:\r\n                                               0 - auto\r\n                                               1 - single\r\n                                               2 - double\r\n                                               3 - original\r\n                                `wrap_iife`  Wrap IIFEs in parenthesis. Note: you may\r\n                                             want to disable `negate_iife` under\r\n                                             compressor options.\r\n    -o, --output <file>         Output file path (default STDOUT). Specify `ast` or\r\n                                `spidermonkey` to write UglifyJS or SpiderMonkey AST\r\n                                as JSON to STDOUT respectively.\r\n    --comments [filter]         Preserve copyright comments in the output. By\r\n                                default this works like Google Closure, keeping\r\n                                JSDoc-style comments that contain \"@license\" or\r\n                                \"@preserve\". You can optionally pass one of the\r\n                                following arguments to this flag:\r\n                                - \"all\" to keep all comments\r\n                                - a valid JS RegExp like `/foo/` or `/^!/` to\r\n                                keep only matching comments.\r\n                                Note that currently not *all* comments can be\r\n                                kept when compression is on, because of dead\r\n                                code removal or cascading statements into\r\n                                sequences.\r\n    --config-file <file>        Read `minify()` options from JSON file.\r\n    -d, --define <expr>[=value] Global definitions.\r\n    --ie8                       Support non-standard Internet Explorer 8.\r\n                                Equivalent to setting `ie8: true` in `minify()`\r\n                                for `compress`, `mangle` and `output` options.\r\n                                By default UglifyJS will not try to be IE-proof.\r\n    --keep-fnames               Do not mangle/drop function names.  Useful for\r\n                                code relying on Function.prototype.name.\r\n    --name-cache                File to hold mangled name mappings.\r\n    --self                      Build UglifyJS as a library (implies --wrap UglifyJS)\r\n    --source-map [options]      Enable source map/specify source map options:\r\n                                `base`  Path to compute relative paths from input files.\r\n                                `content`  Input source map, useful if you're compressing\r\n                                           JS that was generated from some other original\r\n                                           code. Specify \"inline\" if the source map is\r\n                                           included within the sources.\r\n                                `filename`  Name and/or location of the output source.\r\n                                `includeSources`  Pass this flag if you want to include\r\n                                                  the content of source files in the\r\n                                                  source map as sourcesContent property.\r\n                                `root`  Path to the original source to be included in\r\n                                        the source map.\r\n                                `url`  If specified, path to the source map to append in\r\n                                       `//# sourceMappingURL`.\r\n    --stats                     Display operations run time on STDERR.\r\n    --toplevel                  Compress and/or mangle variables in toplevel scope.\r\n    --verbose                   Print diagnostic messages.\r\n    --warn                      Print warning messages.\r\n    --wrap <name>               Embed everything in a big function, making the\r\n                                “exports” and “global” variables available. You\r\n                                need to pass an argument to this option to\r\n                                specify the name that your module will take\r\n                                when included in, say, a browser.\r\n```\r\n\r\nSpecify `--output` (`-o`) to declare the output file.  Otherwise the output\r\ngoes to STDOUT.\r\n\r\n## Source map options\r\n\r\nUglifyJS can generate a source map file, which is highly useful for\r\ndebugging your compressed JavaScript.  To get a source map, pass\r\n`--source-map --output output.js` (source map will be written out to\r\n`output.js.map`).\r\n\r\nAdditionally you might need `--source-map root=<URL>` to pass the URL where\r\nthe original files can be found.  Use `--source-map url=<URL>` to specify\r\nthe URL where the source map can be found.\r\n\r\nFor example:\r\n\r\n    uglifyjs /home/doe/work/foo/src/js/file1.js \\\r\n             /home/doe/work/foo/src/js/file2.js \\\r\n             -o foo.min.js -c -m \\\r\n             --source-map base=\"/home/doe/work/foo/src\",root=\"http://foo.com/src\"\r\n\r\nThe above will compress and mangle `file1.js` and `file2.js`, will drop the\r\noutput in `foo.min.js` and the source map in `foo.min.js.map`.  The source\r\nmapping will refer to `http://foo.com/src/js/file1.js` and\r\n`http://foo.com/src/js/file2.js` (in fact it will list `http://foo.com/src`\r\nas the source map root, and the original files as `js/file1.js` and\r\n`js/file2.js`).\r\n\r\n### Composed source map\r\n\r\nWhen you're compressing JS code that was output by a compiler such as\r\nCoffeeScript, mapping to the JS code won't be too helpful.  Instead, you'd\r\nlike to map back to the original code (i.e. CoffeeScript).  UglifyJS has an\r\noption to take an input source map.  Assuming you have a mapping from\r\nCoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript →\r\ncompressed JS by mapping every token in the compiled JS to its original\r\nlocation.\r\n\r\nTo use this feature you need to pass `--in-source-map\r\n/path/to/input/source.map` or `--in-source-map inline` if the source map is\r\nincluded inline with the sources. Normally the input source map should also\r\npoint to the file containing the generated JS, so if that's correct you can\r\nomit input files from the command line.\r\n\r\n## Mangler options\r\n\r\nTo enable the mangler you need to pass `--mangle` (`-m`).  The following\r\n(comma-separated) options are supported:\r\n\r\n- `toplevel` — mangle names declared in the toplevel scope (disabled by\r\n  default).\r\n\r\n- `eval` — mangle names visible in scopes where `eval` or `with` are used\r\n  (disabled by default).\r\n\r\nWhen mangling is enabled but you want to prevent certain names from being\r\nmangled, you can declare those names with `--mangle reserved` — pass a\r\ncomma-separated list of names.  For example:\r\n\r\n    uglifyjs ... -m reserved=[$,require,exports]\r\n\r\nto prevent the `require`, `exports` and `$` names from being changed.\r\n\r\n### Mangling property names (`--mangle-props`)\r\n\r\n**Note:** this will probably break your code.  Mangling property names is a\r\nseparate step, different from variable name mangling.  Pass\r\n`--mangle-props`.  It will mangle all properties that are seen in some\r\nobject literal, or that are assigned to.  For example:\r\n\r\n```js\r\nvar x = {\r\n  foo: 1\r\n};\r\n\r\nx.bar = 2;\r\nx[\"baz\"] = 3;\r\nx[condition ? \"moo\" : \"boo\"] = 4;\r\nconsole.log(x.something());\r\n```\r\n\r\nIn the above code, `foo`, `bar`, `baz`, `moo` and `boo` will be replaced\r\nwith single characters, while `something()` will be left as is.\r\n\r\nIn order for this to be of any use, we avoid mangling standard JS names by\r\ndefault (`--mangle-props builtins` to override).\r\n\r\nA default exclusion file is provided in `tools/domprops.json` which should\r\ncover most standard JS and DOM properties defined in various browsers.  Pass\r\n`--mangle-props domprops` to disable this feature.\r\n\r\nYou can also use a regular expression to define which property names should be\r\nmangled.  For example, `--mangle-props regex=/^_/` will only mangle property\r\nnames that start with an underscore.\r\n\r\nWhen you compress multiple files using this option, in order for them to\r\nwork together in the end we need to ensure somehow that one property gets\r\nmangled to the same name in all of them.  For this, pass `--name-cache filename.json`\r\nand UglifyJS will maintain these mappings in a file which can then be reused.\r\nIt should be initially empty.  Example:\r\n\r\n```\r\nrm -f /tmp/cache.json  # start fresh\r\nuglifyjs file1.js file2.js --mangle-props --name-cache /tmp/cache.json -o part1.js\r\nuglifyjs file3.js file4.js --mangle-props --name-cache /tmp/cache.json -o part2.js\r\n```\r\n\r\nNow, `part1.js` and `part2.js` will be consistent with each other in terms\r\nof mangled property names.\r\n\r\nUsing the name cache is not necessary if you compress all your files in a\r\nsingle call to UglifyJS.\r\n\r\n#### Mangling unquoted names (`--mangle-props keep_quoted`)\r\n\r\nUsing quoted property name (`o[\"foo\"]`) reserves the property name (`foo`)\r\nso that it is not mangled throughout the entire script even when used in an\r\nunquoted style (`o.foo`). Example:\r\n\r\n```\r\n$ echo 'var o={\"foo\":1, bar:3}; o.foo += o.bar; console.log(o.foo);' | uglifyjs --mangle-props keep_quoted -mc\r\nvar o={foo:1,a:3};o.foo+=o.a,console.log(o.foo);\r\n```\r\n\r\n#### Debugging property name mangling\r\n\r\nYou can also pass `--mangle-props debug` in order to mangle property names\r\nwithout completely obscuring them. For example the property `o.foo`\r\nwould mangle to `o._$foo$_` with this option. This allows property mangling\r\nof a large codebase while still being able to debug the code and identify\r\nwhere mangling is breaking things.\r\n\r\nYou can also pass a custom suffix using `--mangle-props debug=XYZ`. This would then\r\nmangle `o.foo` to `o._$foo$XYZ_`. You can change this each time you compile a\r\nscript to identify how a property got mangled. One technique is to pass a\r\nrandom number on every compile to simulate mangling changing with different\r\ninputs (e.g. as you update the input script with new properties), and to help\r\nidentify mistakes like writing mangled keys to storage.\r\n\r\n## Compressor options\r\n\r\nYou need to pass `--compress` (`-c`) to enable the compressor.  Optionally\r\nyou can pass a comma-separated list of options.  Options are in the form\r\n`foo=bar`, or just `foo` (the latter implies a boolean option that you want\r\nto set `true`; it's effectively a shortcut for `foo=true`).\r\n\r\n- `sequences` (default: true) -- join consecutive simple statements using the\r\n  comma operator.  May be set to a positive integer to specify the maximum number\r\n  of consecutive comma sequences that will be generated. If this option is set to\r\n  `true` then the default `sequences` limit is `200`. Set option to `false` or `0`\r\n  to disable. The smallest `sequences` length is `2`. A `sequences` value of `1`\r\n  is grandfathered to be equivalent to `true` and as such means `200`. On rare\r\n  occasions the default sequences limit leads to very slow compress times in which\r\n  case a value of `20` or less is recommended.\r\n\r\n- `properties` -- rewrite property access using the dot notation, for\r\n  example `foo[\"bar\"] → foo.bar`\r\n\r\n- `dead_code` -- remove unreachable code\r\n\r\n- `drop_debugger` -- remove `debugger;` statements\r\n\r\n- `unsafe` (default: false) -- apply \"unsafe\" transformations (discussion below)\r\n\r\n- `unsafe_comps` (default: false) -- Reverse `<` and `<=` to `>` and `>=` to\r\n  allow improved compression. This might be unsafe when an at least one of two\r\n  operands is an object with computed values due the use of methods like `get`,\r\n  or `valueOf`. This could cause change in execution order after operands in the\r\n  comparison are switching. Compression only works if both `comparisons` and\r\n  `unsafe_comps` are both set to true.\r\n\r\n- `unsafe_math` (default: false) -- optimize numerical expressions like\r\n  `2 * x * 3` into `6 * x`, which may give imprecise floating point results.\r\n\r\n- `unsafe_proto` (default: false) -- optimize expressions like\r\n  `Array.prototype.slice.call(a)` into `[].slice.call(a)`\r\n\r\n- `conditionals` -- apply optimizations for `if`-s and conditional\r\n  expressions\r\n\r\n- `comparisons` -- apply certain optimizations to binary nodes, for example:\r\n  `!(a <= b) → a > b` (only when `unsafe_comps`), attempts to negate binary\r\n  nodes, e.g. `a = !b && !c && !d && !e → a=!(b||c||d||e)` etc.\r\n\r\n- `evaluate` -- attempt to evaluate constant expressions\r\n\r\n- `booleans` -- various optimizations for boolean context, for example `!!a\r\n  ? b : c → a ? b : c`\r\n\r\n- `loops` -- optimizations for `do`, `while` and `for` loops when we can\r\n  statically determine the condition\r\n\r\n- `unused` -- drop unreferenced functions and variables (simple direct variable\r\n  assignments do not count as references unless set to `\"keep_assign\"`)\r\n\r\n- `toplevel` -- drop unreferenced functions (`\"funcs\"`) and/or variables (`\"vars\"`)\r\n  in the toplevel scope (`false` by default, `true` to drop both unreferenced\r\n  functions and variables)\r\n\r\n- `top_retain` -- prevent specific toplevel functions and variables from `unused`\r\n  removal (can be array, comma-separated, RegExp or function. Implies `toplevel`)\r\n\r\n- `hoist_funs` -- hoist function declarations\r\n\r\n- `hoist_vars` (default: false) -- hoist `var` declarations (this is `false`\r\n  by default because it seems to increase the size of the output in general)\r\n\r\n- `if_return` -- optimizations for if/return and if/continue\r\n\r\n- `join_vars` -- join consecutive `var` statements\r\n\r\n- `cascade` -- small optimization for sequences, transform `x, x` into `x`\r\n  and `x = something(), x` into `x = something()`\r\n\r\n- `collapse_vars` -- Collapse single-use `var` and `const` definitions\r\n  when possible.\r\n\r\n- `reduce_vars` -- Improve optimization on variables assigned with and\r\n  used as constant values.\r\n\r\n- `warnings` -- display warnings when dropping unreachable code or unused\r\n  declarations etc.\r\n\r\n- `negate_iife` -- negate \"Immediately-Called Function Expressions\"\r\n  where the return value is discarded, to avoid the parens that the\r\n  code generator would insert.\r\n\r\n- `pure_getters` -- the default is `false`.  If you pass `true` for\r\n  this, UglifyJS will assume that object property access\r\n  (e.g. `foo.bar` or `foo[\"bar\"]`) doesn't have any side effects.\r\n  Specify `\"strict\"` to treat `foo.bar` as side-effect-free only when\r\n  `foo` is certain to not throw, i.e. not `null` or `undefined`.\r\n\r\n- `pure_funcs` -- default `null`.  You can pass an array of names and\r\n  UglifyJS will assume that those functions do not produce side\r\n  effects.  DANGER: will not check if the name is redefined in scope.\r\n  An example case here, for instance `var q = Math.floor(a/b)`.  If\r\n  variable `q` is not used elsewhere, UglifyJS will drop it, but will\r\n  still keep the `Math.floor(a/b)`, not knowing what it does.  You can\r\n  pass `pure_funcs: [ 'Math.floor' ]` to let it know that this\r\n  function won't produce any side effect, in which case the whole\r\n  statement would get discarded.  The current implementation adds some\r\n  overhead (compression will be slower).\r\n\r\n- `drop_console` -- default `false`.  Pass `true` to discard calls to\r\n  `console.*` functions. If you wish to drop a specific function call\r\n  such as `console.info` and/or retain side effects from function arguments\r\n  after dropping the function call then use `pure_funcs` instead.\r\n\r\n- `expression` -- default `false`.  Pass `true` to preserve completion values\r\n  from terminal statements without `return`, e.g. in bookmarklets.\r\n\r\n- `keep_fargs` -- default `true`.  Prevents the\r\n  compressor from discarding unused function arguments.  You need this\r\n  for code which relies on `Function.length`.\r\n\r\n- `keep_fnames` -- default `false`.  Pass `true` to prevent the\r\n  compressor from discarding function names.  Useful for code relying on\r\n  `Function.prototype.name`. See also: the `keep_fnames` [mangle option](#mangle).\r\n\r\n- `passes` -- default `1`. Number of times to run compress. Use an\r\n  integer argument larger than 1 to further reduce code size in some cases.\r\n  Note: raising the number of passes will increase uglify compress time.\r\n\r\n- `keep_infinity` -- default `false`. Pass `true` to prevent `Infinity` from\r\n  being compressed into `1/0`, which may cause performance issues on Chrome.\r\n\r\n### The `unsafe` option\r\n\r\nIt enables some transformations that *might* break code logic in certain\r\ncontrived cases, but should be fine for most code.  You might want to try it\r\non your own code, it should reduce the minified size.  Here's what happens\r\nwhen this flag is on:\r\n\r\n- `new Array(1, 2, 3)` or `Array(1, 2, 3)` → `[ 1, 2, 3 ]`\r\n- `new Object()` → `{}`\r\n- `String(exp)` or `exp.toString()` → `\"\" + exp`\r\n- `new Object/RegExp/Function/Error/Array (...)` → we discard the `new`\r\n- `typeof foo == \"undefined\"` → `foo === void 0`\r\n- `void 0` → `undefined` (if there is a variable named \"undefined\" in\r\n  scope; we do it because the variable name will be mangled, typically\r\n  reduced to a single character)\r\n\r\n### Conditional compilation\r\n\r\nYou can use the `--define` (`-d`) switch in order to declare global\r\nvariables that UglifyJS will assume to be constants (unless defined in\r\nscope).  For example if you pass `--define DEBUG=false` then, coupled with\r\ndead code removal UglifyJS will discard the following from the output:\r\n```javascript\r\nif (DEBUG) {\r\n\tconsole.log(\"debug stuff\");\r\n}\r\n```\r\n\r\nYou can specify nested constants in the form of `--define env.DEBUG=false`.\r\n\r\nUglifyJS will warn about the condition being always false and about dropping\r\nunreachable code; for now there is no option to turn off only this specific\r\nwarning, you can pass `warnings=false` to turn off *all* warnings.\r\n\r\nAnother way of doing that is to declare your globals as constants in a\r\nseparate file and include it into the build.  For example you can have a\r\n`build/defines.js` file with the following:\r\n```javascript\r\nconst DEBUG = false;\r\nconst PRODUCTION = true;\r\n// etc.\r\n```\r\n\r\nand build your code like this:\r\n\r\n    uglifyjs build/defines.js js/foo.js js/bar.js... -c\r\n\r\nUglifyJS will notice the constants and, since they cannot be altered, it\r\nwill evaluate references to them to the value itself and drop unreachable\r\ncode as usual.  The build will contain the `const` declarations if you use\r\nthem. If you are targeting < ES6 environments which does not support `const`,\r\nusing `var` with `reduce_vars` (enabled by default) should suffice.\r\n\r\n#### Conditional compilation, API\r\nYou can also use conditional compilation via the programmatic API. With the difference that the\r\nproperty name is `global_defs` and is a compressor property:\r\n\r\n```js\r\nuglifyJS.minify([ \"input.js\"], {\r\n    compress: {\r\n        dead_code: true,\r\n        global_defs: {\r\n            DEBUG: false\r\n        }\r\n    }\r\n});\r\n```\r\n\r\n## Beautifier options\r\n\r\nThe code generator tries to output shortest code possible by default.  In\r\ncase you want beautified output, pass `--beautify` (`-b`).  Optionally you\r\ncan pass additional arguments that control the code output:\r\n\r\n- `beautify` (default `true`) -- whether to actually beautify the output.\r\n  Passing `-b` will set this to true, but you might need to pass `-b` even\r\n  when you want to generate minified code, in order to specify additional\r\n  arguments, so you can use `-b beautify=false` to override it.\r\n- `indent_level` (default 4)\r\n- `indent_start` (default 0) -- prefix all lines by that many spaces\r\n- `quote_keys` (default `false`) -- pass `true` to quote all keys in literal\r\n  objects\r\n- `space_colon` (default `true`) -- insert a space after the colon signs\r\n- `ascii_only` (default `false`) -- escape Unicode characters in strings and\r\n  regexps (affects directives with non-ascii characters becoming invalid)\r\n- `inline_script` (default `false`) -- escape the slash in occurrences of\r\n  `</script` in strings\r\n- `width` (default 80) -- only takes effect when beautification is on, this\r\n  specifies an (orientative) line width that the beautifier will try to\r\n  obey.  It refers to the width of the line text (excluding indentation).\r\n  It doesn't work very well currently, but it does make the code generated\r\n  by UglifyJS more readable.\r\n- `max_line_len` (default 32000) -- maximum line length (for uglified code)\r\n- `bracketize` (default `false`) -- always insert brackets in `if`, `for`,\r\n  `do`, `while` or `with` statements, even if their body is a single\r\n  statement.\r\n- `semicolons` (default `true`) -- separate statements with semicolons.  If\r\n  you pass `false` then whenever possible we will use a newline instead of a\r\n  semicolon, leading to more readable output of uglified code (size before\r\n  gzip could be smaller; size after gzip insignificantly larger).\r\n- `preamble` (default `null`) -- when passed it must be a string and\r\n  it will be prepended to the output literally.  The source map will\r\n  adjust for this text.  Can be used to insert a comment containing\r\n  licensing information, for example.\r\n- `quote_style` (default `0`) -- preferred quote style for strings (affects\r\n  quoted property names and directives as well):\r\n  - `0` -- prefers double quotes, switches to single quotes when there are\r\n    more double quotes in the string itself.\r\n  - `1` -- always use single quotes\r\n  - `2` -- always use double quotes\r\n  - `3` -- always use the original quotes\r\n- `keep_quoted_props` (default `false`) -- when turned on, prevents stripping\r\n  quotes from property names in object literals.\r\n- `ecma` (default `5`) -- set output printing mode.  This will only change the\r\n  output in direct control of the beautifier.  Non-compatible features in the\r\n  abstract syntax tree will still be outputted as is.\r\n\r\n### Keeping copyright notices or other comments\r\n\r\nYou can pass `--comments` to retain certain comments in the output.  By\r\ndefault it will keep JSDoc-style comments that contain \"@preserve\",\r\n\"@license\" or \"@cc_on\" (conditional compilation for IE).  You can pass\r\n`--comments all` to keep all the comments, or a valid JavaScript regexp to\r\nkeep only comments that match this regexp.  For example `--comments /^!/`\r\nwill keep comments like `/*! Copyright Notice */`.\r\n\r\nNote, however, that there might be situations where comments are lost.  For\r\nexample:\r\n```javascript\r\nfunction f() {\r\n\t/** @preserve Foo Bar */\r\n\tfunction g() {\r\n\t  // this function is never called\r\n\t}\r\n\treturn something();\r\n}\r\n```\r\n\r\nEven though it has \"@preserve\", the comment will be lost because the inner\r\nfunction `g` (which is the AST node to which the comment is attached to) is\r\ndiscarded by the compressor as not referenced.\r\n\r\nThe safest comments where to place copyright information (or other info that\r\nneeds to be kept in the output) are comments attached to toplevel nodes.\r\n\r\n## Support for the SpiderMonkey AST\r\n\r\nUglifyJS has its own abstract syntax tree format; for\r\n[practical reasons](http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/)\r\nwe can't easily change to using the SpiderMonkey AST internally.  However,\r\nUglifyJS now has a converter which can import a SpiderMonkey AST.\r\n\r\nFor example [Acorn][acorn] is a super-fast parser that produces a\r\nSpiderMonkey AST.  It has a small CLI utility that parses one file and dumps\r\nthe AST in JSON on the standard output.  To use UglifyJS to mangle and\r\ncompress that:\r\n\r\n    acorn file.js | uglifyjs -p spidermonkey -m -c\r\n\r\nThe `-p spidermonkey` option tells UglifyJS that all input files are not\r\nJavaScript, but JS code described in SpiderMonkey AST in JSON.  Therefore we\r\ndon't use our own parser in this case, but just transform that AST into our\r\ninternal AST.\r\n\r\n### Use Acorn for parsing\r\n\r\nMore for fun, I added the `-p acorn` option which will use Acorn to do all\r\nthe parsing.  If you pass this option, UglifyJS will `require(\"acorn\")`.\r\n\r\nAcorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but\r\nconverting the SpiderMonkey tree that Acorn produces takes another 150ms so\r\nin total it's a bit more than just using UglifyJS's own parser.\r\n\r\nAPI Reference\r\n-------------\r\n\r\nAssuming installation via NPM, you can load UglifyJS in your application\r\nlike this:\r\n```javascript\r\nvar UglifyJS = require(\"uglify-es\");\r\n```\r\n\r\nThere is a single toplevel function, `minify(files, options)`, which will\r\nperforms all the steps in a configurable manner.\r\nExample:\r\n```javascript\r\nvar result = UglifyJS.minify(\"var b = function() {};\");\r\nconsole.log(result.code);  // minified output\r\nconsole.log(result.error); // runtime error\r\n```\r\n\r\nYou can also compress multiple files:\r\n```javascript\r\nvar result = UglifyJS.minify({\r\n  \"file1.js\": \"var a = function() {};\",\r\n  \"file2.js\": \"var b = function() {};\"\r\n});\r\nconsole.log(result.code);\r\n```\r\n\r\nTo generate a source map:\r\n```javascript\r\nvar result = UglifyJS.minify({\"file1.js\": \"var a = function() {};\"}, {\r\n  sourceMap: {\r\n    filename: \"out.js\",\r\n    url: \"out.js.map\"\r\n  }\r\n});\r\nconsole.log(result.code); // minified output\r\nconsole.log(result.map);  // source map\r\n```\r\n\r\nNote that the source map is not saved in a file, it's just returned in\r\n`result.map`.  The value passed for `sourceMap.url` is only used to set\r\n`//# sourceMappingURL=out.js.map` in `result.code`. The value of\r\n`filename` is only used to set `file` attribute (see [the spec][sm-spec])\r\nin source map file.\r\n\r\nYou can set option `sourceMap.url` to be `\"inline\"` and source map will\r\nbe appended to code.\r\n\r\nYou can also specify sourceRoot property to be included in source map:\r\n```javascript\r\nvar result = UglifyJS.minify({\"file1.js\": \"var a = function() {};\"}, {\r\n  sourceMap: {\r\n    root: \"http://example.com/src\",\r\n    url: \"out.js.map\"\r\n  }\r\n});\r\n```\r\n\r\nIf you're compressing compiled JavaScript and have a source map for it, you\r\ncan use `sourceMap.content`:\r\n```javascript\r\nvar result = UglifyJS.minify({\"compiled.js\": \"compiled code\"}, {\r\n  sourceMap: {\r\n    content: \"content from compiled.js.map\",\r\n    url: \"minified.js.map\"\r\n  }\r\n});\r\n// same as before, it returns `code` and `map`\r\n```\r\n\r\nIf you're using the `X-SourceMap` header instead, you can just omit `sourceMap.url`.\r\n\r\nOther options:\r\n\r\n- `warnings` (default `false`) — pass `true` to display compressor warnings.\r\n\r\n- `mangle` (default `true`) — pass `false` to skip mangling names, or pass\r\n  an object to specify mangling options (see below).\r\n\r\n- `mangleProperties` (default `false`) — pass an object to specify custom\r\n  mangle property options.\r\n\r\n- `output` (default `null`) — pass an object if you wish to specify\r\n  additional [output options](#beautifier-options).  The defaults are optimized\r\n  for best compression.\r\n\r\n- `compress` (default `{}`) — pass `false` to skip compressing entirely.\r\n  Pass an object to specify custom [compressor options](#compressor-options).\r\n\r\n- `parse` (default {}) — pass an object if you wish to specify some\r\n  additional [parser options](#the-parser).\r\n\r\n##### mangle\r\n\r\n - `reserved` - pass an array of identifiers that should be excluded from mangling\r\n\r\n - `toplevel` — mangle names declared in the toplevel scope (disabled by\r\n  default).\r\n\r\n - `eval` — mangle names visible in scopes where eval or with are used\r\n  (disabled by default).\r\n\r\n - `keep_fnames` -- default `false`.  Pass `true` to not mangle\r\n  function names.  Useful for code relying on `Function.prototype.name`.\r\n  See also: the `keep_fnames` [compress option](#compressor-options).\r\n\r\n  Examples:\r\n\r\n  ```javascript\r\n  //tst.js\r\n  var globalVar;\r\n  function funcName(firstLongName, anotherLongName)\r\n  {\r\n    var myVariable = firstLongName +  anotherLongName;\r\n  }\r\n\r\n  UglifyJS.minify(\"tst.js\").code;\r\n  // 'function funcName(a,n){}var globalVar;'\r\n\r\n  UglifyJS.minify(\"tst.js\", { mangle: { reserved: ['firstLongName'] } }).code;\r\n  // 'function funcName(firstLongName,a){}var globalVar;'\r\n\r\n  UglifyJS.minify(\"tst.js\", { mangle: { toplevel: true } }).code;\r\n  // 'function n(n,a){}var a;'\r\n  ```\r\n\r\n##### mangle.properties options\r\n\r\n - `regex` — Pass a RegExp to only mangle certain names\r\n - `keep_quoted` — Only mangle unquoted property names\r\n - `debug` — Mangle names with the original name still present. Defaults to `false`.\r\n   Pass an empty string to enable, or a non-empty string to set the suffix.\r\n\r\n  [acorn]: https://github.com/ternjs/acorn\r\n  [sm-spec]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mishoo/UglifyJS2.git"
  },
  "scripts": {
    "test": "node test/run-tests.js"
  },
  "version": "3.0.3"
}
